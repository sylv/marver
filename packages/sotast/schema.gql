# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BoundingBox {
  x1: Float!
  x2: Float!
  y1: Float!
  y2: Float!
}

type Collection {
  aggregateFileCount: Float!
  children: [Collection!]!
  description: String
  directFileCount: Float!
  id: ID!
  name: String!
  parent: Collection
  previewFiles: [File!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Face {
  boundingBox: BoundingBox!
  id: ID!
  person: Person!
}

type File {
  checkedAt: DateTime!
  collections: [Collection!]!
  corrupted: Boolean!
  createdAt: DateTime!
  directory: String!
  exifData: FileExifData
  extension: String
  faces: [Face!]!
  id: ID!
  indexedAt: DateTime!
  info: FileInfo!
  jobStates: [JobState!]!
  mimeType: String
  modifiedAt: DateTime!
  name: String!
  path: String!
  poster: FilePoster!
  previewBase64: String
  similar(after: String, before: String, first: Float, last: Float, offset: Float, type: SimilarityType): FileConnection!
  size: Float!
  sizeFormatted: String!
  texts: [FileText!]!
  thumbnail: FileThumbnail!
  thumbnailUrl: String
  timeline: FileTimeline!
  type: FileType
  unavailable: Boolean!
}

type FileConnection {
  edges: [FileEdge!]!
  pageInfo: PageInfo!

  """Total number of FileEntity items"""
  totalCount: Int!
}

"""Provides FileEntity item and a cursor to its position"""
type FileEdge {
  """The position of this FileEntity item"""
  cursor: String!
  node: File!
}

type FileExifData {
  cameraMake: String
  cameraModel: String
  dateTime: DateTime
  exposureTime: String
  fNumber: String
  flash: String
  focalLength: String
  iso: Float
  latitude: Float
  lensMake: String
  lensModel: String
  longitude: Float
}

type FileInfo {
  audioChannels: Float
  audioCodec: String
  bitrate: Float
  durationFormatted: String
  durationSeconds: Float
  framerate: Float
  hasEmbeddedSubtitles: Boolean
  hasFaces: Boolean

  """Whether text coudl be found in the image or video"""
  hasText: Boolean
  height: Float
  isAnimated: Boolean

  """Whether no subtitles could be generated from the audio on this video"""
  nonVerbal: Boolean
  videoCodec: String
  width: Float
}

type FilePoster {
  height: Float!
  mimeType: String!
  width: Float!
}

enum FileSort {
  DiskCreated
  Name
  Path
  Size
}

enum FileSortDirection {
  ASC
  DESC
}

type FileText {
  boundingBox: BoundingBox!
  code: String
  confidence: Float!
  id: ID!
  text: String!
  timestamp: Float
  type: Float!
}

type FileThumbnail {
  height: Float!
  mimeType: String!
  width: Float!
}

type FileTimeline {
  height: Float!
  mimeType: String!
  width: Float!
}

enum FileType {
  Image
  Video
}

type JobState {
  errorMessage: String
  executedAt: DateTime!
  retries: Float!
  retryAfter: Float
  state: State!
  type: String!
}

type Mutation {
  runTask(id: ID!): Task!
}

"""Provides info abou the current page"""
type PageInfo {
  """Cursor referencing the end of the page"""
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!

  """Cursor referencing the beginning of the page"""
  startCursor: String!
}

type Person {
  aliases: [String!]!
  birthDate: DateTime
  deathDate: DateTime
  description: String
  id: ID!
  name: String!
}

type PersonConnection {
  edges: [PersonEdge!]!
  pageInfo: PageInfo!

  """Total number of PersonEntity items"""
  totalCount: Int!
}

"""Provides PersonEntity item and a cursor to its position"""
type PersonEdge {
  """The position of this PersonEntity item"""
  cursor: String!
  node: Person!
}

type Query {
  collection(id: String!): Collection!
  collections: [Collection!]!
  file(id: String!): File
  files(after: String, afterDate: DateTime, before: String, beforeDate: DateTime, collectionId: ID, direction: FileSortDirection = DESC, first: Float, last: Float, offset: Float, personId: ID, search: String, sort: FileSort): FileConnection!
  people(after: String, before: String, first: Float, last: Float, offset: Float, search: String): PersonConnection!
  person(id: ID!): Person!
  serverInfo: ServerInfo!
  tasks: [Task!]!
}

type ServerInfo {
  branch: String!
  buildDate: DateTime!
  commit: String!
  version: String!
}

enum SimilarityType {
  Images
  Related
  SameFolder
  SameType
  Similar
  Videos
}

enum State {
  Completed
  Failed
}

type Tag {
  name: ID!
}

type Task {
  description: String
  id: ID!
  name: String!
  nextRunAt: Float!
  running: Boolean
}