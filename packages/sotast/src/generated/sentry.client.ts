/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter optimize_speed,use_proto_field_name
// @generated from protobuf file "sentry.proto" (package "me.sylver.marver.sentry", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SentryService } from "./sentry.js";
import type { DetectFacesResponse } from "./sentry.js";
import type { DetectFacesRequest } from "./sentry.js";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetVectorResponse } from "./sentry.js";
import type { GetVectorRequest } from "./sentry.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service me.sylver.marver.sentry.SentryService
 */
export interface ISentryServiceClient {
    /**
     * @generated from protobuf rpc: GetVector(me.sylver.marver.sentry.GetVectorRequest) returns (me.sylver.marver.sentry.GetVectorResponse);
     */
    getVector(input: GetVectorRequest, options?: RpcOptions): UnaryCall<GetVectorRequest, GetVectorResponse>;
    /**
     * @generated from protobuf rpc: DetectFaces(me.sylver.marver.sentry.DetectFacesRequest) returns (me.sylver.marver.sentry.DetectFacesResponse);
     */
    detectFaces(input: DetectFacesRequest, options?: RpcOptions): UnaryCall<DetectFacesRequest, DetectFacesResponse>;
}
/**
 * @generated from protobuf service me.sylver.marver.sentry.SentryService
 */
export class SentryServiceClient implements ISentryServiceClient, ServiceInfo {
    typeName = SentryService.typeName;
    methods = SentryService.methods;
    options = SentryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetVector(me.sylver.marver.sentry.GetVectorRequest) returns (me.sylver.marver.sentry.GetVectorResponse);
     */
    getVector(input: GetVectorRequest, options?: RpcOptions): UnaryCall<GetVectorRequest, GetVectorResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVectorRequest, GetVectorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetectFaces(me.sylver.marver.sentry.DetectFacesRequest) returns (me.sylver.marver.sentry.DetectFacesResponse);
     */
    detectFaces(input: DetectFacesRequest, options?: RpcOptions): UnaryCall<DetectFacesRequest, DetectFacesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetectFacesRequest, DetectFacesResponse>("unary", this._transport, method, opt, input);
    }
}
