
// @generated by protobuf-ts 2.9.3 with parameter optimize_speed,use_proto_field_name
// @generated from protobuf file "core.proto" (package "me.sylver.marver.core", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message me.sylver.marver.core.OCR
 */
export interface OCR {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: me.sylver.marver.core.BoundingBox bounding_box = 2;
     */
    bounding_box?: BoundingBox;
    /**
     * @generated from protobuf field: float confidence = 3;
     */
    confidence: number;
}
/**
 * @generated from protobuf message me.sylver.marver.core.Face
 */
export interface Face {
    /**
     * @generated from protobuf field: me.sylver.marver.core.BoundingBox bounding_box = 1;
     */
    bounding_box?: BoundingBox;
    /**
     * @generated from protobuf field: me.sylver.marver.core.Embedding embedding = 2;
     */
    embedding?: Embedding;
    /**
     * @generated from protobuf field: float confidence = 3;
     */
    confidence: number;
    /**
     * @generated from protobuf field: repeated me.sylver.marver.core.Landmark landmarks = 4;
     */
    landmarks: Landmark[];
}
/**
 * @generated from protobuf message me.sylver.marver.core.Landmark
 */
export interface Landmark {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: float x = 2;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 3;
     */
    y: number;
}
/**
 * @generated from protobuf message me.sylver.marver.core.BoundingBox
 */
export interface BoundingBox {
    /**
     * @generated from protobuf field: float x1 = 1;
     */
    x1: number;
    /**
     * @generated from protobuf field: float y1 = 2;
     */
    y1: number;
    /**
     * @generated from protobuf field: float x2 = 3;
     */
    x2: number;
    /**
     * @generated from protobuf field: float y2 = 4;
     */
    y2: number;
}
/**
 * @generated from protobuf message me.sylver.marver.core.Embedding
 */
export interface Embedding {
    /**
     * @generated from protobuf field: repeated float value = 1;
     */
    value: number[];
    /**
     * @generated from protobuf field: optional string source = 2;
     */
    source?: string;
}
/**
 * @generated from protobuf message me.sylver.marver.core.Subtitle
 */
export interface Subtitle {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: int32 start = 2;
     */
    start: number;
    /**
     * @generated from protobuf field: int32 end = 3;
     */
    end: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class OCR$Type extends MessageType<OCR> {
    constructor() {
        super("me.sylver.marver.core.OCR", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bounding_box", kind: "message", localName: "bounding_box", T: () => BoundingBox },
            { no: 3, name: "confidence", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<OCR>): OCR {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        message.confidence = 0;
        if (value !== undefined)
            reflectionMergePartial<OCR>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OCR): OCR {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* me.sylver.marver.core.BoundingBox bounding_box */ 2:
                    message.bounding_box = BoundingBox.internalBinaryRead(reader, reader.uint32(), options, message.bounding_box);
                    break;
                case /* float confidence */ 3:
                    message.confidence = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OCR, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* me.sylver.marver.core.BoundingBox bounding_box = 2; */
        if (message.bounding_box)
            BoundingBox.internalBinaryWrite(message.bounding_box, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float confidence = 3; */
        if (message.confidence !== 0)
            writer.tag(3, WireType.Bit32).float(message.confidence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.OCR
 */
export const OCR = new OCR$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Face$Type extends MessageType<Face> {
    constructor() {
        super("me.sylver.marver.core.Face", [
            { no: 1, name: "bounding_box", kind: "message", localName: "bounding_box", T: () => BoundingBox },
            { no: 2, name: "embedding", kind: "message", T: () => Embedding },
            { no: 3, name: "confidence", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "landmarks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Landmark }
        ]);
    }
    create(value?: PartialMessage<Face>): Face {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.confidence = 0;
        message.landmarks = [];
        if (value !== undefined)
            reflectionMergePartial<Face>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Face): Face {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* me.sylver.marver.core.BoundingBox bounding_box */ 1:
                    message.bounding_box = BoundingBox.internalBinaryRead(reader, reader.uint32(), options, message.bounding_box);
                    break;
                case /* me.sylver.marver.core.Embedding embedding */ 2:
                    message.embedding = Embedding.internalBinaryRead(reader, reader.uint32(), options, message.embedding);
                    break;
                case /* float confidence */ 3:
                    message.confidence = reader.float();
                    break;
                case /* repeated me.sylver.marver.core.Landmark landmarks */ 4:
                    message.landmarks.push(Landmark.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Face, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* me.sylver.marver.core.BoundingBox bounding_box = 1; */
        if (message.bounding_box)
            BoundingBox.internalBinaryWrite(message.bounding_box, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* me.sylver.marver.core.Embedding embedding = 2; */
        if (message.embedding)
            Embedding.internalBinaryWrite(message.embedding, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float confidence = 3; */
        if (message.confidence !== 0)
            writer.tag(3, WireType.Bit32).float(message.confidence);
        /* repeated me.sylver.marver.core.Landmark landmarks = 4; */
        for (let i = 0; i < message.landmarks.length; i++)
            Landmark.internalBinaryWrite(message.landmarks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.Face
 */
export const Face = new Face$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Landmark$Type extends MessageType<Landmark> {
    constructor() {
        super("me.sylver.marver.core.Landmark", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Landmark>): Landmark {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<Landmark>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Landmark): Landmark {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float x */ 2:
                    message.x = reader.float();
                    break;
                case /* float y */ 3:
                    message.y = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Landmark, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Bit32).float(message.x);
        /* float y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Bit32).float(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.Landmark
 */
export const Landmark = new Landmark$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoundingBox$Type extends MessageType<BoundingBox> {
    constructor() {
        super("me.sylver.marver.core.BoundingBox", [
            { no: 1, name: "x1", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y1", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "x2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "y2", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BoundingBox>): BoundingBox {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x1 = 0;
        message.y1 = 0;
        message.x2 = 0;
        message.y2 = 0;
        if (value !== undefined)
            reflectionMergePartial<BoundingBox>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoundingBox): BoundingBox {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x1 */ 1:
                    message.x1 = reader.float();
                    break;
                case /* float y1 */ 2:
                    message.y1 = reader.float();
                    break;
                case /* float x2 */ 3:
                    message.x2 = reader.float();
                    break;
                case /* float y2 */ 4:
                    message.y2 = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoundingBox, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x1 = 1; */
        if (message.x1 !== 0)
            writer.tag(1, WireType.Bit32).float(message.x1);
        /* float y1 = 2; */
        if (message.y1 !== 0)
            writer.tag(2, WireType.Bit32).float(message.y1);
        /* float x2 = 3; */
        if (message.x2 !== 0)
            writer.tag(3, WireType.Bit32).float(message.x2);
        /* float y2 = 4; */
        if (message.y2 !== 0)
            writer.tag(4, WireType.Bit32).float(message.y2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.BoundingBox
 */
export const BoundingBox = new BoundingBox$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Embedding$Type extends MessageType<Embedding> {
    constructor() {
        super("me.sylver.marver.core.Embedding", [
            { no: 1, name: "value", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "source", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Embedding>): Embedding {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = [];
        if (value !== undefined)
            reflectionMergePartial<Embedding>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Embedding): Embedding {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float value */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.value.push(reader.float());
                    else
                        message.value.push(reader.float());
                    break;
                case /* optional string source */ 2:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Embedding, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float value = 1; */
        if (message.value.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.value.length; i++)
                writer.float(message.value[i]);
            writer.join();
        }
        /* optional string source = 2; */
        if (message.source !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.Embedding
 */
export const Embedding = new Embedding$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Subtitle$Type extends MessageType<Subtitle> {
    constructor() {
        super("me.sylver.marver.core.Subtitle", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "end", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Subtitle>): Subtitle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        message.start = 0;
        message.end = 0;
        if (value !== undefined)
            reflectionMergePartial<Subtitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subtitle): Subtitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int32 start */ 2:
                    message.start = reader.int32();
                    break;
                case /* int32 end */ 3:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subtitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int32 start = 2; */
        if (message.start !== 0)
            writer.tag(2, WireType.Varint).int32(message.start);
        /* int32 end = 3; */
        if (message.end !== 0)
            writer.tag(3, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.core.Subtitle
 */
export const Subtitle = new Subtitle$Type();
