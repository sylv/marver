/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter optimize_speed,use_proto_field_name
// @generated from protobuf file "solomon.proto" (package "me.sylver.marver.solomon", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OCR } from "./core.js";
import { Face } from "./core.js";
/**
 * @generated from protobuf message me.sylver.marver.solomon.DetectFacesRequest
 */
export interface DetectFacesRequest {
    /**
     * @generated from protobuf field: string file_path = 1;
     */
    file_path: string;
}
/**
 * @generated from protobuf message me.sylver.marver.solomon.DetectFacesReply
 */
export interface DetectFacesReply {
    /**
     * @generated from protobuf field: repeated me.sylver.marver.core.Face faces = 1;
     */
    faces: Face[];
}
/**
 * @generated from protobuf message me.sylver.marver.solomon.GetOCRRequest
 */
export interface GetOCRRequest {
    /**
     * @generated from protobuf field: string file_path = 1;
     */
    file_path: string;
}
/**
 * @generated from protobuf message me.sylver.marver.solomon.GetOCRReply
 */
export interface GetOCRReply {
    /**
     * @generated from protobuf field: repeated me.sylver.marver.core.OCR results = 1;
     */
    results: OCR[];
}
// @generated message type with reflection information, may provide speed optimized methods
class DetectFacesRequest$Type extends MessageType<DetectFacesRequest> {
    constructor() {
        super("me.sylver.marver.solomon.DetectFacesRequest", [
            { no: 1, name: "file_path", kind: "scalar", localName: "file_path", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DetectFacesRequest>): DetectFacesRequest {
        const message = { file_path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DetectFacesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetectFacesRequest): DetectFacesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_path */ 1:
                    message.file_path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetectFacesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_path = 1; */
        if (message.file_path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file_path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.solomon.DetectFacesRequest
 */
export const DetectFacesRequest = new DetectFacesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetectFacesReply$Type extends MessageType<DetectFacesReply> {
    constructor() {
        super("me.sylver.marver.solomon.DetectFacesReply", [
            { no: 1, name: "faces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Face }
        ]);
    }
    create(value?: PartialMessage<DetectFacesReply>): DetectFacesReply {
        const message = { faces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DetectFacesReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetectFacesReply): DetectFacesReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated me.sylver.marver.core.Face faces */ 1:
                    message.faces.push(Face.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetectFacesReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated me.sylver.marver.core.Face faces = 1; */
        for (let i = 0; i < message.faces.length; i++)
            Face.internalBinaryWrite(message.faces[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.solomon.DetectFacesReply
 */
export const DetectFacesReply = new DetectFacesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOCRRequest$Type extends MessageType<GetOCRRequest> {
    constructor() {
        super("me.sylver.marver.solomon.GetOCRRequest", [
            { no: 1, name: "file_path", kind: "scalar", localName: "file_path", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOCRRequest>): GetOCRRequest {
        const message = { file_path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOCRRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOCRRequest): GetOCRRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file_path */ 1:
                    message.file_path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOCRRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string file_path = 1; */
        if (message.file_path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file_path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.solomon.GetOCRRequest
 */
export const GetOCRRequest = new GetOCRRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOCRReply$Type extends MessageType<GetOCRReply> {
    constructor() {
        super("me.sylver.marver.solomon.GetOCRReply", [
            { no: 1, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OCR }
        ]);
    }
    create(value?: PartialMessage<GetOCRReply>): GetOCRReply {
        const message = { results: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOCRReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOCRReply): GetOCRReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated me.sylver.marver.core.OCR results */ 1:
                    message.results.push(OCR.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOCRReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated me.sylver.marver.core.OCR results = 1; */
        for (let i = 0; i < message.results.length; i++)
            OCR.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message me.sylver.marver.solomon.GetOCRReply
 */
export const GetOCRReply = new GetOCRReply$Type();
/**
 * @generated ServiceType for protobuf service me.sylver.marver.solomon.SolomonService
 */
export const SolomonService = new ServiceType("me.sylver.marver.solomon.SolomonService", [
    { name: "DetectFaces", options: {}, I: DetectFacesRequest, O: DetectFacesReply },
    { name: "GetOCR", options: {}, I: GetOCRRequest, O: GetOCRReply }
]);
